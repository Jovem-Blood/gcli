package handler

import (
"github.com/gin-gonic/gin"
"net/http"
)

type {{ .FileName }}Handler interface {
Get{{ .FileName }}ById(ctx *gin.Context)
Update{{ .FileName }}(ctx *gin.Context)
}

type {{ .FileNameTitleLower }}Handler struct {
*Handler
{{ .FileNameTitleLower }}Service service.{{ .FileName }}Service
}

func New{{ .FileName }}Handler(handler *Handler, {{ .FileNameTitleLower }}Service service.{{ .FileName }}Service) {{ .FileName }}Handler {
return &{{ .FileNameTitleLower }}Handler{
Handler:              handler,
{{ .FileNameTitleLower }}Service: {{ .FileNameTitleLower }}Service,
}
}

func (h *{{ .FileNameTitleLower }}Handler) Get{{ .FileName }}ById(ctx *gin.Context) {
var params struct {
Id int64 `form:"id" binding:"required"`
}

// If there's an error while binding the params
// Handle the error condition outside the template

// Get the {{ .FileNameTitleLower }} using the service
{{ .FileNameTitleLower }}, err := h.{{ .FileNameTitleLower }}Service.Get{{ .FileName }}ById(params.Id)
h.logger.Info("Get{{ .FileName }}ByID", zap.Any("{{ .FileNameTitleLower }}", {{ .FileNameTitleLower }}))

// If there's an error during the service call
// Handle the error condition outside the template

resp.HandleSuccess(ctx, {{ .FileNameTitleLower }})
}

func (h *{{ .FileNameTitleLower }}Handler) Update{{ .FileName }}(ctx *gin.Context) {
resp.HandleSuccess(ctx, nil)
}
