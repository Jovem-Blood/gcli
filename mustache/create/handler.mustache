package handler

import (
    "github.com/gin-gonic/gin"
    "github.com/pkg/errors"
    "{{ .ProjectName }}/source/service"
    "{{ .ProjectName }}/pkg/helper/resp"
    "go.uber.org/zap"
    "net/http"
)

type {{ .FileName }}Handler interface {
    Get{{ .FileName }}ById(ctx *gin.Context)
    GetAll{{ .FileName }}(ctx *gin.Context)
    Create{{ .FileName }}(ctx *gin.Context)
    Update{{ .FileName }}(ctx *gin.Context)
    Delete{{ .FileName }}(ctx *gin.Context)
}

type {{ .FileNameTitleLower }}Handler struct {
    *Handler
    {{ .FileNameTitleLower }}Service service.{{ .FileName }}Service
}

func New{{ .FileName }}Handler(handler *Handler, {{ .FileNameTitleLower }}Service service.{{ .FileName }}Service) {{ .FileName }}Handler {
    return &{{ .FileNameTitleLower }}Handler{
        Handler:              handler,
        {{ .FileNameTitleLower }}Service: {{ .FileNameTitleLower }}Service,
    }
}

func (h *{{ .FileNameTitleLower }}Handler) Get{{ .FileName }}ById(ctx *gin.Context) {
    var params struct {
        Id uint `form:"id" binding:"required"`
    }
    if err := ctx.ShouldBind(&params); err != nil {
        resp.HandleError(ctx, http.StatusBadRequest, 1, err.Error(), nil)
        return
    }

    {{ .FileNameTitleLower }}, err := h.{{ .FileNameTitleLower }}Service.Get{{ .FileName }}ById(params.Id)
    h.logger.Info("Get{{ .FileName }}ByID", zap.Any("{{ .FileNameTitleLower }}", {{ .FileNameTitleLower }}))
    if err != nil {
        resp.HandleError(ctx, http.StatusInternalServerError, 1, err.Error(), nil)
        return
    }

    resp.HandleSuccess(ctx, {{ .FileNameTitleLower }})
}

func (h *{{ .FileNameTitleLower }}Handler) GetAll{{ .FileName }}(ctx *gin.Context) {
    {{ .FileNameTitleLower }}, err := h.{{ .FileNameTitleLower }}Service.GetAll{{ .FileName }}()
    h.logger.Info("GetAll{{ .FileName }}", zap.Any("{{ .FileNameTitleLower }}", {{ .FileNameTitleLower }}))
    if err != nil {
        resp.HandleError(ctx, http.StatusInternalServerError, 1, err.Error(), nil)
        return
    }

    resp.HandleSuccess(ctx, {{ .FileNameTitleLower }})
}

func (h *{{ .FileNameTitleLower }}Handler) Create{{ .FileName }}(ctx *gin.Context) {
    req := new(service.Create{{.FileName}}Request)

    if err := ctx.ShouldBindJSON(req); err != nil {
        resp.HandleError(ctx, http.StatusBadRequest, 1, errors.Wrap(err, "invalid request").Error(), nil)
        return
    }

       if _, err := h.{{ .FileNameTitleLower }}Service.Create{{.FileName}}(req); err != nil {
        resp.HandleError(ctx, http.StatusBadRequest, 1, errors.Wrap(err, "invalid request").Error(), nil)
        return
    }

    resp.HandleSuccess(ctx, nil)
}

func (h *{{ .FileNameTitleLower }}Handler) Update{{ .FileName }}(ctx *gin.Context) {
{{/*    {{.FileNameTitleLower }}Id := ctx.Param("id")*/}}

    req := new(service.Update{{.FileName}}Request)

    if err := ctx.ShouldBindJSON(req); err != nil {
        resp.HandleError(ctx, http.StatusBadRequest, 1, errors.Wrap(err, "invalid request").Error(), nil)
        return
    }

       if _, err := h.{{ .FileNameTitleLower }}Service.Update{{.FileName}}(req); err != nil {
        resp.HandleError(ctx, http.StatusBadRequest, 1, errors.Wrap(err, "invalid request").Error(), nil)
        return
    }

    resp.HandleSuccess(ctx, nil)
}

func (h *{{ .FileNameTitleLower }}Handler) Delete{{ .FileName }}(ctx *gin.Context) {
    resp.HandleSuccess(ctx, nil)
}
